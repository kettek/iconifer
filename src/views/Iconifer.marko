import { remote } from 'electron'
import * as fs from 'fs'
import { encode as IcoEncode } from 'ico-endec'
import { encode as IcnsEncode } from 'icns-endec'

class {
    onCreate() {
        this.state = {
            images: {},
            activeSet: 'X11',
            activeExport: 'ico',
            inactiveICNS: {},
            exports: {
                'icns': {
                    /*
                        1024 = ic10 (10.7)
                        512  = ic09 (10.5)
                        256  = ic08 (10.5)
                        128  = ic07 (10.7)
                        64   = icp6 (10.7)
                        32   = icp5 (10.7)
                        16   = icp4 (10.7)
                    */
                },
                'ico': {},
                'png': {},
            },
            sets: {
                'Mac OS': {
                    'Application': {
                        active: true,
                        icons: ['1024x1024', '512x512', '256x256', '128x128', '64x64', '32x32', '16x16']
                    }
                },
                'Windows': {
                    'Application': {
                        active: true,
                        icons: ['256x256', '48x48', '32x32', '16x16']
                    },
                    'Application (Classic Mode)': {
                        active: false,
                        icons: ['64x64', '48x48', '32x32', '24x24', '16x16']
                    },
                    'Overlays': {
                        active: false,
                        icons: ['128x128', '24x24', '16x16', '10x10']
                    },
                    'Balloon': {
                        active: false,
                        icons: ['40x40', '32x32']
                    },
                    'Other': {
                        active: false,
                        icons: ['128x128', '96x96', '64x64', '40x40', '24x24', '22x22', '14x14', '10x10', '8x8']
                    },
                },
                'X11': {
                    'Gnome': {
                        active: false,
                        icons: ['96x96','48x48','24x24']
                    },
                    'KDE': {
                        active: true,
                        icons: ['256x256', '128x128', '64x64', '48x48', '32x32', '22x22', '16x16']
                    },
                    'Enlightenment': {
                        active: false,
                        icons: ['128x128', '244x244'],
                    }
                },
                'Android': {
                    'Application': {
                        active: true,
                        icons: ['192x192', '48x48']
                    }
                },
                'iOS': {
                    'Application': {
                        active: true,
                        icons: ['180x180', '167x167', '152x152', '120x120']
                    }
                },
                'Windows Phone': {
                    'Application': {
                        active: true,
                        icons: ['200x200', '173x173', '99x99', '62x62'],
                    }
                },
                'Custom': {
                    'Custom': {
                        active: true,
                        icons: []
                    },
                }
            },
        }
        // FIXME: icp4 through icp6 generate corrupted icons -- do these actually not support PNG...?
        this.supportedICNS = ['ic07', 'ic08', 'ic09', 'ic10']
        this.sizeToICNMap = {
          '16x16':     'icp4',
          '32x32':     'icp5',
          '64x64':     'icp6',
          '128x128':   'ic07',
          '256x256':   'ic08',
          '512x512':   'ic09',
          '1024x1024': 'ic10',
        }
        this.ICNToSizeMap = {
          'icp4': '16x16',
          'icp5': '32x32',
          'icp6': '64x64',
          'ic07': '128x128',
          'ic08': '256x256',
          'ic09': '512x512',
          'ic10': '1024x1024',
        }

        this.canvas = document.createElement('canvas')
        this.ctx = this.canvas.getContext('2d')
    }
    createImage(target) {
        this.state.images[target] = {
            image: '',
            originalImage: '',
            blob: null,
            autogenerated: true,
        }
    }
    updateImage(img, target, force=false) {
        if (!this.state.images[target]) this.createImage(target)
        if (this.state.images[target].image === '' || force === true) {
            let [w, h] = target.split('x')
            this.canvas.width = w
            this.canvas.height = h
            this.ctx.save()
            if (img.naturalWidth < Number(w) || img.naturalHeight < Number(h)) this.ctx.imageSmoothingEnabled = false
            else this.ctx.imageSmoothingQuality = 'medium'
            this.ctx.drawImage(img, 0, 0, w, h)
            this.ctx.restore()
            this.state.images[target].image = this.canvas.toDataURL()
            this.canvas.toBlob(blob => {
              this.state.images[target].blob = blob
            })
            return true
        }
        return false
    }
    updateImages(icons, img, target, originalData) {
        this.updateImage(img, target, true)
        this.state.images[target].autogenerated = false
        this.state.images[target].originalImage = originalData
        for (let k of icons) {
            if (this.updateImage(img, k, false)) this.state.images[k].originalImage = originalData
        }
        this.forceUpdate()
    }
    handleLoadImage(icons, name, data) {
        let img = document.createElement('img')
        img.addEventListener('load', () => {
            this.updateImages(icons, img, name, data)
        })
        img.src = data
    }
    handleClearImage(target) {
        this.createImage(target)
        this.forceUpdate()
    }
    activateSet(which) {
        this.state.activeSet = which
    }
    toggleSetGroup(setName, groupName) {
        this.state.sets[setName][groupName].active = !this.state.sets[setName][groupName].active
        this.forceUpdate()
    }
    activateExport(which) {
        this.state.activeExport = which
    }
    export() {
      switch(this.state.activeExport) {
        case 'ico':
          this.exportICO()
        case 'icns':
          this.exportICNS()
        break;
      }
    }
    setInactiveICNS(which, e) {
      this.state.inactiveICNS[which] = !e.target.checked
      this.forceUpdate()
      this.update()
    }
    getExportingIcons() {
      let icons = [...Object.entries(this.state.sets[this.state.activeSet]).reduce((o,v)=>{
        if (!v[1].active) return o
        return new Set([...o, ...v[1].icons])
      }, new Set())].sort((a, b)=>{
        let [aW, aH] = a.split('x')
        aW = Number(aW), aH = Number(aH)
        let [bW, bH] = b.split('x')
        bW = Number(bW), bH = Number(bH)
        if (aW+aH > bW+bH) return -1
        if (aW+aH < bW+bH) return 1
        return 0
      }).filter(icon => this.state.images[icon].image !== '' )
      return icons
    }
    async exportICO() {
      let icons = this.getExportingIcons().filter(icon => {
        let [w, h] = icon.split('x')
        w = Number(w), h = Number(h)
        if (w <= 256 && h <= 256) return true
      }).reverse()

      for (let i = 0; i < icons.length; i++) {
        icons[i] = await this.state.images[icons[i]].blob.arrayBuffer()
      }

      let r = await remote.dialog.showSaveDialog({
        filters: [{name: 'ICO', extensions: ['ico']}],
        title: 'Export to ICO file',
      })
      if (r.canceled) return

      let outputBuffer = IcoEncode(icons)
      await fs.promises.writeFile(r.filePath, outputBuffer, null)
    }
    async exportICNS() {
      // TODO: We somehow update the UI before all of this to show whether or not the icon is being exported. Additionally, it would be nice to provide support the 2x retina ic11-ic14 icons.
      let icons = this.getExportingIcons().filter(icon => {
        if (this.supportedICNS.includes(this.sizeToICNMap[icon])) return true
      }).reverse()

      for (let i = 0; i < icons.length; i++) {
        icons[i] = {
            OSType: this.sizeToICNMap[icons[i]],
            buffer: await this.state.images[icons[i]].blob.arrayBuffer(),
        }
      }

      let r = await remote.dialog.showSaveDialog({
        filters: [{name: 'ICNS', extensions: ['icns']}],
        title: 'Export to ICNS file',
      })
      if (r.canceled) return

      let outputBuffer = IcnsEncode(icons)
      await fs.promises.writeFile(r.filePath, outputBuffer, null)
    }
    exportPNGs() {
      // Export to the desired directory, formatting the files according to some sort of string-matching input.
    }
}

style {
    :root {
        --primary: #51789d;
        --secondary: #0c1a13;
        --tertiary: #667e94;
        --quaternary: #f3e5ec;
    }
    * {
        box-sizing: border-box;
    }
    body {
        background-color: black;
        color: var(--secondary);
        margin: 0;
    }
    [draggable] {
        user-select: none;
    }
    .Content {
        display: grid;
        grid-template-rows: auto auto minmax(0, 1fr);
        grid-template-columns: minmax(0, 1fr);
        height: 100vh;
    }
    .SetTabs {
        display: grid;
        grid-auto-flow: column;
    }
    .SetTabs__Tab {
        background: var(--secondary);
        color: var(--tertiary);
        padding: .5em;
        font-size: 125%;
        font-family: sans-serif;
        text-align: center;
        cursor: pointer;
        user-select: none;
        opacity: 0.8;
        transition: .3s all;
    }
    .SetTabs__Tab:hover {
        background: var(--tertiary);
        color: var(--secondary);
    }
    .SetTabs__Tab.-active {
        background: var(--tertiary);
        color: var(--secondary);
        opacity: 1;
    }
    .Set {
        display: flex;
        font-size: 100%;
        font-family: sans-serif;
        background: var(--tertiary);
        padding-top: .5em;
        padding-left: .5em;
        padding-right: .5em;
    }
    .Set__Item {
        display: inline-block;
        padding: .5em;
        user-select: none;
        cursor: pointer;
        transition: .3s all;
    }
    .Set__Item input {
        display: none;
    }
    .Set__Item.-active {
        background: var(--primary);
    }
    .Icons {
        display: grid;
        grid-auto-flow: column;
        grid-gap: 1em;
        align-items: center;
        justify-content: flex-start;
        transition: all .5s;
        overflow: auto;
        background: var(--primary);
        padding: 1em;
    }
    .Exports {
        display: grid;
        grid-template-rows: 1fr;
        grid-template-columns: auto auto minmax(0, 1fr);
        justify-content: flex-start;
        font-size: 100%;
        font-family: sans-serif;
    }
    .Exports__Title {
        display: flex;
        align-items: center;
        justify-content: center;
        background: var(--quaternary);
        padding: .5em;
        font-size: 125%;
        text-align: center;
    }
    .Exports__Entries {
        display: grid;
        background: var(--quaternary);
    }
    .Exports__Entries__Item {
        background: var(--primary);
        display: inline-block;
        padding: .25em;
        user-select: none;
        cursor: pointer;
        transition: .3s all;
    }
    .Exports__Entries__Item.-active {
        background: var(--quaternary);
    }
    .Exports__Info {
        background: var(--quaternary);
        padding: .5em;
    }
}

div.Menu
div.Content
    div.SetTabs
        for|set| of=Object.entries(state.sets)
            div.SetTabs__Tab class={'-active': state.activeSet===set[0]} on-click('activateSet', set[0]) -- ${set[0]}
    div.Set
        for|groupName, group| in=state.sets[state.activeSet]
            label.Set__Item class={'-active': group.active}
                input type='checkbox' checked=group.active on-click('toggleSetGroup', state.activeSet, groupName)
                span -- ${groupName}
    div.Icons
        $ let icons = [...Object.entries(state.sets[state.activeSet]).reduce((o,v)=>{
            if (!v[1].active) return o
            return new Set([...o, ...v[1].icons])
        }, new Set())].sort((a, b)=>{
            let [aW, aH] = a.split('x')
            aW = Number(aW), aH = Number(aH)
            let [bW, bH] = b.split('x')
            bW = Number(bW), bH = Number(bH)
            if (aW+aH > bW+bH) return -1
            if (aW+aH < bW+bH) return 1
            return 0
        })
        for|icon| of=icons
            Icon name=icon originalImage=state.images[icon]?state.images[icon].originalImage:'' image=state.images[icon]?state.images[icon].image:'' on-loadimage('handleLoadImage', icons) on-clearimage('handleClearImage')
    div.Exports
        div.Exports__Title 
            span -- Export to
        div.Exports__Entries
            for|exp| of=Object.entries(state.exports)
                label.Exports__Entries__Item class={'-active': state.activeExport===exp[0]} on-click('activateExport', exp[0])
                    span -- ${exp[0]}
        div.Exports__Info
          if(state.activeExport === 'icns')
            for|icn| of=component.supportedICNS
              $ let disabled = state.images[component.ICNToSizeMap[icn]] ? state.images[component.ICNToSizeMap[icn]].image === '' : true
              label
                input type='checkbox' checked=disabled?false:!state.inactiveICNS[icn] disabled=disabled on-change('setInactiveICNS', icn)
                span -- ${icn}(${component.ICNToSizeMap[icn]})
          else-if(state.activeExport === 'ico')
            span -- ico opts
          else-if(state.activeExport === 'png')
            span -- png opts
          button on-click('export') -- export
