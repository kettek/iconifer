class {
    onCreate() {
        this.state = {
            images: {},
            activeSet: 'X11',
            sets: {
                'Mac OS': {
                    'Application': {
                        active: true,
                        icons: ['1024x1024', '512x512', '256x256', '128x128', '64x64', '32x32', '16x16']
                    }
                },
                'Windows': {
                    'Application': {
                        active: true,
                        icons: ['256x256', '48x48', '32x32', '16x16']
                    },
                    'Application (Classic Mode)': {
                        active: false,
                        icons: ['64x64', '48x48', '32x32', '24x24', '16x16']
                    },
                    'Overlays': {
                        active: false,
                        icons: ['128x128', '24x24', '16x16', '10x10']
                    },
                    'Balloon': {
                        active: false,
                        icons: ['40x40', '32x32']
                    },
                    'Other': {
                        active: false,
                        icons: ['128x128', '96x96', '64x64', '40x40', '24x24', '22x22', '14x14', '10x10', '8x8']
                    },
                },
                'X11': {
                    'Gnome': {
                        active: true,
                        icons: ['96x96','48x48','24x24']
                    },
                    'KDE': {
                        active: true,
                        icons: ['256x256', '128x128', '64x64', '48x48', '32x32', '22x22', '16x16']
                    },
                    'Enlightenment': {
                        active: true,
                        icons: ['128x128', '244x244'],
                    }
                },
                'Android': {
                    'Application': {
                        active: true,
                        icons: ['192x192', '48x48']
                    }
                },
                'iOS': {
                    'Application': {
                        active: true,
                        icons: ['180x180', '167x167', '152x152', '120x120']
                    }
                },
                'Windows Phone': {
                    'Application': {
                        active: true,
                        icons: ['200x200', '173x173', '99x99', '62x62'],
                    }
                },
                'Custom': {
                    'Custom': {
                        active: true,
                        icons: []
                    },
                }
            },
        }
        this.canvas = document.createElement('canvas')
        this.ctx = this.canvas.getContext('2d')
    }
    updateImage(img, target, force=false) {
        console.log('making', target)
        if (!this.state.images[target]) {
           this.state.images[target] = {
               image: '',
               autogenerated: true,
           }
        }
        if (this.state.images[target].image === '' || force===true) {
            console.log('making it....')
            let [w, h] = target.split('x')
            this.canvas.width = w
            this.canvas.height = h
            this.ctx.save()
            if (img.naturalWidth < Number(w) || img.naturalHeight < Number(h)) this.ctx.imageSmoothingEnabled = false
            else this.ctx.imageSmoothingQuality = 'medium'
            this.ctx.drawImage(img, 0, 0, w, h)
            this.ctx.restore()
            this.state.images[target].image = this.canvas.toDataURL()
            console.log(this.state.images[target])
        }
    }
    updateImages(icons, img, target) {
        this.updateImage(img, target, true)
        this.state.images[target].autogenerated = false
        for (let k of icons) {
            this.updateImage(img, k, false)
        }
        this.forceUpdate()
    }
    handleLoadImage(icons, name, data) {
        let img = document.createElement('img')
        img.addEventListener('load', () => {
            this.updateImages(icons, img, name)
        })
        img.src = data
   }
   activateSet(which) {
       this.state.activeSet = which
   }
   toggleSetGroup(setName, groupName) {
       this.state.sets[setName][groupName].active = !this.state.sets[setName][groupName].active
       this.forceUpdate()
   }
}

style {
    :root {
        --primary: #51789d;
        --secondary: #0c1a13;
        --tertiary: #667e94;
    }
    * {
        box-sizing: border-box;
    }
    body {
        background-color: black;
        color: var(--secondary);
        margin: 0;
    }
    [draggable] {
        user-select: none;
    }
    .Content {
        display: grid;
        grid-template-rows: auto auto minmax(0, 1fr);
        grid-template-columns: minmax(0, 1fr);
        height: 100vh;
    }
    .SetTabs {
        display: grid;
        grid-auto-flow: column;
    }
    .SetTabs__Tab {
        background: var(--secondary);
        color: var(--tertiary);
        padding: .5em;
        font-size: 125%;
        font-family: sans-serif;
        text-align: center;
        cursor: pointer;
        user-select: none;
        opacity: 0.8;
        transition: .3s all;
    }
    .SetTabs__Tab:hover {
        background: var(--tertiary);
        color: var(--secondary);
    }
    .SetTabs__Tab.-active {
        background: var(--tertiary);
        color: var(--secondary);
        opacity: 1;
    }
    .Set {
        display: flex;
        font-size: 100%;
        font-family: sans-serif;
        background: var(--tertiary);
        padding-top: .5em;
        padding-left: .5em;
        padding-right: .5em;
    }
    .Set__Item {
        display: inline-block;
        padding: .5em;
        user-select: none;
        cursor: pointer;
        transition: .3s all;
    }
    .Set__Item.-active {
        background: var(--primary);
    }
    .Icons {
        display: grid;
        grid-auto-flow: column;
        grid-gap: 1em;
        align-items: center;
        justify-content: flex-start;
        transition: all .5s;
        overflow: auto;
        background: var(--primary);
    }
}

div.Menu
div.Content
    div.SetTabs
        for|set| of=Object.entries(state.sets).sort()
            div.SetTabs__Tab class={'-active': state.activeSet===set[0]} on-click('activateSet', set[0]) -- ${set[0]}
    div.Set
        for|groupName, group| in=state.sets[state.activeSet]
            label.Set__Item class={'-active': group.active}
                input type='checkbox' checked=group.active on-click('toggleSetGroup', state.activeSet, groupName)
                span -- ${groupName}
    div.Icons
        $ let icons = [...Object.entries(state.sets[state.activeSet]).reduce((o,v)=>{
            if (!v[1].active) return o
            return new Set([...o, ...v[1].icons])
        }, new Set())].sort((a, b)=>{
            let [aW, aH] = a.split('x')
            aW = Number(aW), aH = Number(aH)
            let [bW, bH] = b.split('x')
            bW = Number(bW), bH = Number(bH)
            if (aW+aH > bW+bH) return -1
            if (aW+aH < bW+bH) return 1
            return 0
        })
        for|icon| of=icons
            Icon name=icon image=state.images[icon]?state.images[icon].image:'' on-loadimage('handleLoadImage', icons)