class {
    onCreate() {
        this.state = {
            icons: ['256x256','128x128','96x96','64x64','48x48','40x40','32x32','24x24','22x22','16x16','14x14','10x10','8x8'].reduce((o,i)=>{
                o[i] = {
                    image: '',
                    autogenerated: false,
                }
                return o
            }, {}),
            groups: {
                'Windows': {
                    active: true,
                    loading: false,
                    icons: ['256x256', '48x48', '32x32', '16x16']
                },
                'Windows (Classic Mode)': {
                    active: true,
                    loading: false,
                    icons: ['64x64', '48x48', '32x32', '24x24', '16x16']
                },
                'Windows (Overlays)': {
                    active: false,
                    loading: false,
                    icons: ['128x128', '24x24', '16x16', '10x10'],
                },
                'Windows (Balloon)': {
                    active: false,
                    loading: false,
                    icons: ['40x40', '32x32'],
                },
                'Windows (Other)': {
                    active: false,
                    loading: false,
                    icons: ['128x128', '96x96', '64x64', '40x40', '24x24', '22x22', '14x14', '10x10', '8x8'],
                },
            }
        }
        this.canvas = document.createElement('canvas')
        this.ctx = this.canvas.getContext('2d')
    }
    updateImages(img, mainTarget) {
        for (let [k, v] of Object.entries(this.state.icons)) {
            if (v.image === '' || k === mainTarget) {
                let [w, h] = k.split('x')
                this.canvas.width = w
                this.canvas.height = h
                this.ctx.save()
                if (img.naturalWidth < Number(w) || img.naturalHeight < Number(h)) this.ctx.imageSmoothingEnabled = false
                else this.ctx.imageSmoothingQuality = 'medium'
                this.ctx.drawImage(img, 0, 0, w, h)
                this.ctx.restore()
                this.state.icons[k].image = this.canvas.toDataURL()

                if (k !== mainTarget) this.state.icons[k].autogenerated = true

                this.forceUpdate()
            }
        }
    }
    handleLoadImage(name, data) {
        let img = document.createElement('img')
        img.addEventListener('load', () => {
            this.updateImages(img, name)
        })
        img.src = data
   }
}

div.Content
    for|group| of=Object.entries(state.groups)
        IconGroup key=group[0] name=group[0] group=group[1] icons=state.icons on-loadimage('handleLoadImage')