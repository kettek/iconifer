class {
    readFile(file) {
        const reader = new FileReader()
        reader.addEventListener('load', e => {
            this.emit('loadimage', this.input.name, reader.result)
        })
        reader.readAsDataURL(file)
    }
    handleClick(e) {
        const inp = document.createElement('input')
        inp.type = 'file'
        inp.accept = 'image/*'
        inp.addEventListener('input', e => {
            for (let i = 0; i < e.target.files.length; i++) {
                this.readFile(e.target.files[i])
            }
        })
        inp.click()
    }
    handleRightClick(e) {
        e.preventDefault()
        this.emit('clearimage', this.input.name)
    }
    handleDrop(e) {
        e.preventDefault()
        const dataURL = e.dataTransfer.getData('dataURL')
        if (dataURL) {
            this.emit('loadimage', this.input.name, dataURL)
        } else {
            for (let i = 0; i < e.dataTransfer.items.length; i++) {
                if (e.dataTransfer.items[i].kind === 'file' && e.dataTransfer.items[i].type.match(/^image\//)) {
                    this.readFile(e.dataTransfer.items[i].getAsFile())
                }
            }
        }
    }
    handleDragstart(e) {
        e.dataTransfer.effectAllowed = 'copy'
        e.dataTransfer.setDragImage(this.getEl('image'), 0, 0)
        e.dataTransfer.setData('dataURL', this.input.image)
    }
    handleDragover(e) {
        e.preventDefault()
    }
    onInput(inp) {
        this.forceUpdate()
    }
}
style {
    .Icon {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    .Icon__Image {
        background-image: /* tint image */
            linear-gradient(to right, rgba(192, 192, 192, 0.75), rgba(192, 192, 192, 0.75)),
            /* checkered effect */
            linear-gradient(to right, black 50%, white 50%),
            linear-gradient(to bottom, black 50%, white 50%);
        background-blend-mode: normal, difference, normal;
        background-size: 2em 2em;
        border: 1px solid var(--secondary);
    }
    .Icon__Name {
        text-align: center;
        font-weight: bold;
    }
}
div.Icon draggable="true" on-dragover('handleDragover') on-drop('handleDrop') on-dragstart('handleDragstart') on-click('handleClick') on-contextmenu('handleRightClick')
    $ let [w, h] = input.name.split('x')
    img.Icon__Image key='image' draggable=false width=w height=h src=input.image
    span.Icon__Name draggable=false -- ${input.name}