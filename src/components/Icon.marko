class {
    handleDrop(e) {
        e.preventDefault()
        for (let i = 0; i < e.dataTransfer.items.length; i++) {
            if (e.dataTransfer.items[i].kind ==='file') {
                // Handle dropped file
                let file = e.dataTransfer.items[i].getAsFile();
                let reader = new FileReader()
                reader.addEventListener('load', e => {
                    this.emit('loadimage', this.input.name, reader.result)
                })
                reader.readAsDataURL(file)
            } else {
                // Handle dropped Icon
            }
        }
    }
    handleDragstart(e) {
        e.dataTransfer.setData('image/png', this.input.image)
        e.dataTransfer.effectAllowed = 'copy'
        e.dataTransfer.setDragImage(this.input.image, 0, 0)
    }
    handleDragover(e) {
        e.preventDefault()
    }
    onInput(inp) {
        this.forceUpdate()
    }
}
style {
    .Icon {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    .Icon__Image {
        background-image: /* tint image */
            linear-gradient(to right, rgba(192, 192, 192, 0.75), rgba(192, 192, 192, 0.75)),
            /* checkered effect */
            linear-gradient(to right, black 50%, white 50%),
            linear-gradient(to bottom, black 50%, white 50%);
        background-blend-mode: normal, difference, normal;
        background-size: 2em 2em;
        border: 1px solid var(--secondary);
    }
    .Icon__Name {
        text-align: center;
        font-weight: bold;
    }
}
div.Icon draggable="true" on-dragover('handleDragover') on-drop('handleDrop') on-dragstart('handleDragstart')
    $ let [w, h] = input.name.split('x')
    img.Icon__Image draggable=false width=w height=h src=input.image
    span.Icon__Name draggable=false -- ${input.name}